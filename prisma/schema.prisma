// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                String      @id @default(uuid())
  username          String      @unique
  email             String      @unique
  password          String
  passwordUpdatedAt DateTime
  accountIsVerified Boolean     @default(false)
  emailIsVerified   Boolean     @default(false)
  token             String?     @unique
  tokenExpiredAt    DateTime?
  tokenType         TOKEN_TYPE?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  role              Role        @relation(fields: [roleId], references: [id])
  roleId            String
  profil            Profil?
  Device            Device?
}

model Profil {
  id        String   @id @default(cuid())
  full_name String?
  photo     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Device {
  id      String    @id @default(cuid())
  shortid String    @unique
  user    User?     @relation(fields: [userId], references: [id])
  userId  String?   @unique
  Session Session[]
}

model Session {
  id            String    @id @default(cuid())
  streamLDR     String
  streamDist    String
  streamPosture String
  streamRest    String
  active        Boolean
  device        Device    @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId      String
  History       History[]
}

model History {
  id        String  @id @default(cuid())
  ldr       String
  distance  String
  posture   String
  rest      String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
}

enum TOKEN_TYPE {
  RESET_TOKEN
  VERIFICATION_TOKEN
}
